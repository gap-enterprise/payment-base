/*
 * This file is generated by jOOQ.
 */
package io.surati.gap.payment.base.db.jooq.generated.tables;


import io.surati.gap.payment.base.db.jooq.generated.Keys;
import io.surati.gap.payment.base.db.jooq.generated.Public;
import io.surati.gap.payment.base.db.jooq.generated.tables.records.PayPaymentOrderRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PayPaymentOrder extends TableImpl<PayPaymentOrderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.pay_payment_order</code>
     */
    public static final PayPaymentOrder PAY_PAYMENT_ORDER = new PayPaymentOrder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PayPaymentOrderRecord> getRecordType() {
        return PayPaymentOrderRecord.class;
    }

    /**
     * The column <code>public.pay_payment_order.id</code>.
     */
    public final TableField<PayPaymentOrderRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.pay_payment_order.date</code>.
     */
    public final TableField<PayPaymentOrderRecord, LocalDate> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.pay_payment_order.reference</code>.
     */
    public final TableField<PayPaymentOrderRecord, String> REFERENCE = createField(DSL.name("reference"), SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * The column <code>public.pay_payment_order.beneficiary_id</code>.
     */
    public final TableField<PayPaymentOrderRecord, Long> BENEFICIARY_ID = createField(DSL.name("beneficiary_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.pay_payment_order.amount_to_pay</code>.
     */
    public final TableField<PayPaymentOrderRecord, Double> AMOUNT_TO_PAY = createField(DSL.name("amount_to_pay"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.pay_payment_order.reference_document_id</code>.
     */
    public final TableField<PayPaymentOrderRecord, Long> REFERENCE_DOCUMENT_ID = createField(DSL.name("reference_document_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.pay_payment_order.authorizing_officer_id</code>.
     */
    public final TableField<PayPaymentOrderRecord, Long> AUTHORIZING_OFFICER_ID = createField(DSL.name("authorizing_officer_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.pay_payment_order.status_id</code>.
     */
    public final TableField<PayPaymentOrderRecord, String> STATUS_ID = createField(DSL.name("status_id"), SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * The column <code>public.pay_payment_order.author_id</code>.
     */
    public final TableField<PayPaymentOrderRecord, Long> AUTHOR_ID = createField(DSL.name("author_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.pay_payment_order.group_id</code>.
     */
    public final TableField<PayPaymentOrderRecord, Long> GROUP_ID = createField(DSL.name("group_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.pay_payment_order.reason</code>.
     */
    public final TableField<PayPaymentOrderRecord, String> REASON = createField(DSL.name("reason"), SQLDataType.VARCHAR(225).nullable(false), this, "");

    /**
     * The column <code>public.pay_payment_order.description</code>.
     */
    public final TableField<PayPaymentOrderRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(225), this, "");

    private PayPaymentOrder(Name alias, Table<PayPaymentOrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private PayPaymentOrder(Name alias, Table<PayPaymentOrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.pay_payment_order</code> table reference
     */
    public PayPaymentOrder(String alias) {
        this(DSL.name(alias), PAY_PAYMENT_ORDER);
    }

    /**
     * Create an aliased <code>public.pay_payment_order</code> table reference
     */
    public PayPaymentOrder(Name alias) {
        this(alias, PAY_PAYMENT_ORDER);
    }

    /**
     * Create a <code>public.pay_payment_order</code> table reference
     */
    public PayPaymentOrder() {
        this(DSL.name("pay_payment_order"), null);
    }

    public <O extends Record> PayPaymentOrder(Table<O> child, ForeignKey<O, PayPaymentOrderRecord> key) {
        super(child, key, PAY_PAYMENT_ORDER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<PayPaymentOrderRecord, Long> getIdentity() {
        return (Identity<PayPaymentOrderRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PayPaymentOrderRecord> getPrimaryKey() {
        return Keys.PAY_PAYMENT_ORDER_PKEY;
    }

    @Override
    public List<UniqueKey<PayPaymentOrderRecord>> getKeys() {
        return Arrays.<UniqueKey<PayPaymentOrderRecord>>asList(Keys.PAY_PAYMENT_ORDER_PKEY);
    }

    @Override
    public List<ForeignKey<PayPaymentOrderRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PayPaymentOrderRecord, ?>>asList(Keys.PAY_PAYMENT_ORDER__PAY_PAYMENT_ORDER_BENEFICIARY_ID_FKEY, Keys.PAY_PAYMENT_ORDER__PAY_PAYMENT_ORDER_REFERENCE_DOCUMENT_ID_FKEY, Keys.PAY_PAYMENT_ORDER__PAY_PAYMENT_ORDER_GROUP_ID_FKEY);
    }

    private transient PayThirdParty _payThirdParty;
    private transient PayReferenceDocument _payReferenceDocument;
    private transient PayPaymentOrderGroup _payPaymentOrderGroup;

    public PayThirdParty payThirdParty() {
        if (_payThirdParty == null)
            _payThirdParty = new PayThirdParty(this, Keys.PAY_PAYMENT_ORDER__PAY_PAYMENT_ORDER_BENEFICIARY_ID_FKEY);

        return _payThirdParty;
    }

    public PayReferenceDocument payReferenceDocument() {
        if (_payReferenceDocument == null)
            _payReferenceDocument = new PayReferenceDocument(this, Keys.PAY_PAYMENT_ORDER__PAY_PAYMENT_ORDER_REFERENCE_DOCUMENT_ID_FKEY);

        return _payReferenceDocument;
    }

    public PayPaymentOrderGroup payPaymentOrderGroup() {
        if (_payPaymentOrderGroup == null)
            _payPaymentOrderGroup = new PayPaymentOrderGroup(this, Keys.PAY_PAYMENT_ORDER__PAY_PAYMENT_ORDER_GROUP_ID_FKEY);

        return _payPaymentOrderGroup;
    }

    @Override
    public PayPaymentOrder as(String alias) {
        return new PayPaymentOrder(DSL.name(alias), this);
    }

    @Override
    public PayPaymentOrder as(Name alias) {
        return new PayPaymentOrder(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PayPaymentOrder rename(String name) {
        return new PayPaymentOrder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PayPaymentOrder rename(Name name) {
        return new PayPaymentOrder(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, LocalDate, String, Long, Double, Long, Long, String, Long, Long, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
