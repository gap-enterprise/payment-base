/*
 * This file is generated by jOOQ.
 */
package io.surati.gap.payment.base.jooq.generated.tables;


import io.surati.gap.payment.base.jooq.generated.Keys;
import io.surati.gap.payment.base.jooq.generated.Public;
import io.surati.gap.payment.base.jooq.generated.tables.records.PayPaymentRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PayPayment extends TableImpl<PayPaymentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.pay_payment</code>
     */
    public static final PayPayment PAY_PAYMENT = new PayPayment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PayPaymentRecord> getRecordType() {
        return PayPaymentRecord.class;
    }

    /**
     * The column <code>public.pay_payment.id</code>.
     */
    public final TableField<PayPaymentRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.pay_payment.internal_reference</code>.
     */
    public final TableField<PayPaymentRecord, String> INTERNAL_REFERENCE = createField(DSL.name("internal_reference"), SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * The column <code>public.pay_payment.issuer_reference</code>.
     */
    public final TableField<PayPaymentRecord, String> ISSUER_REFERENCE = createField(DSL.name("issuer_reference"), SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * The column <code>public.pay_payment.beneficiary_id</code>.
     */
    public final TableField<PayPaymentRecord, Long> BENEFICIARY_ID = createField(DSL.name("beneficiary_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.pay_payment.amount</code>.
     */
    public final TableField<PayPaymentRecord, Double> AMOUNT = createField(DSL.name("amount"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.pay_payment.date</code>.
     */
    public final TableField<PayPaymentRecord, LocalDateTime> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.pay_payment.edition_place</code>.
     */
    public final TableField<PayPaymentRecord, String> EDITION_PLACE = createField(DSL.name("edition_place"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.pay_payment.mention_1</code>.
     */
    public final TableField<PayPaymentRecord, String> MENTION_1 = createField(DSL.name("mention_1"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.pay_payment.mention_2</code>.
     */
    public final TableField<PayPaymentRecord, String> MENTION_2 = createField(DSL.name("mention_2"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.pay_payment.status_id</code>.
     */
    public final TableField<PayPaymentRecord, String> STATUS_ID = createField(DSL.name("status_id"), SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * The column <code>public.pay_payment.cancel_reason_description</code>.
     */
    public final TableField<PayPaymentRecord, String> CANCEL_REASON_DESCRIPTION = createField(DSL.name("cancel_reason_description"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.pay_payment.author_id</code>.
     */
    public final TableField<PayPaymentRecord, Long> AUTHOR_ID = createField(DSL.name("author_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.pay_payment.group_id</code>.
     */
    public final TableField<PayPaymentRecord, Long> GROUP_ID = createField(DSL.name("group_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.pay_payment.cancel_reason_id</code>.
     */
    public final TableField<PayPaymentRecord, String> CANCEL_REASON_ID = createField(DSL.name("cancel_reason_id"), SQLDataType.VARCHAR(25), this, "");

    /**
     * The column <code>public.pay_payment.cancel_author_id</code>.
     */
    public final TableField<PayPaymentRecord, Long> CANCEL_AUTHOR_ID = createField(DSL.name("cancel_author_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.pay_payment.batch_id</code>.
     */
    public final TableField<PayPaymentRecord, Long> BATCH_ID = createField(DSL.name("batch_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.pay_payment.issuer_id</code>.
     */
    public final TableField<PayPaymentRecord, Long> ISSUER_ID = createField(DSL.name("issuer_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.pay_payment.mean_type_id</code>.
     */
    public final TableField<PayPaymentRecord, String> MEAN_TYPE_ID = createField(DSL.name("mean_type_id"), SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * The column <code>public.pay_payment.cancel_date</code>.
     */
    public final TableField<PayPaymentRecord, LocalDateTime> CANCEL_DATE = createField(DSL.name("cancel_date"), SQLDataType.LOCALDATETIME(6), this, "");

    private PayPayment(Name alias, Table<PayPaymentRecord> aliased) {
        this(alias, aliased, null);
    }

    private PayPayment(Name alias, Table<PayPaymentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.pay_payment</code> table reference
     */
    public PayPayment(String alias) {
        this(DSL.name(alias), PAY_PAYMENT);
    }

    /**
     * Create an aliased <code>public.pay_payment</code> table reference
     */
    public PayPayment(Name alias) {
        this(alias, PAY_PAYMENT);
    }

    /**
     * Create a <code>public.pay_payment</code> table reference
     */
    public PayPayment() {
        this(DSL.name("pay_payment"), null);
    }

    public <O extends Record> PayPayment(Table<O> child, ForeignKey<O, PayPaymentRecord> key) {
        super(child, key, PAY_PAYMENT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<PayPaymentRecord, Long> getIdentity() {
        return (Identity<PayPaymentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PayPaymentRecord> getPrimaryKey() {
        return Keys.PAY_PAYMENT_PKEY;
    }

    @Override
    public List<UniqueKey<PayPaymentRecord>> getKeys() {
        return Arrays.<UniqueKey<PayPaymentRecord>>asList(Keys.PAY_PAYMENT_PKEY);
    }

    @Override
    public List<ForeignKey<PayPaymentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PayPaymentRecord, ?>>asList(Keys.PAY_PAYMENT_BENEFICIARY_ID_FKEY, Keys.PAY_PAYMENT_GROUP_ID_FKEY, Keys.PAY_PAYMENT_BATCH_ID_FKEY, Keys.PAY_PAYMENT_ISSUER_ID_FKEY);
    }

    private transient PayThirdParty _payPaymentBeneficiaryIdFkey;
    private transient PayPaymentOrderGroup _payPaymentOrderGroup;
    private transient PayPaymentBatch _payPaymentBatch;
    private transient PayThirdParty _payPaymentIssuerIdFkey;

    public PayThirdParty payPaymentBeneficiaryIdFkey() {
        if (_payPaymentBeneficiaryIdFkey == null)
            _payPaymentBeneficiaryIdFkey = new PayThirdParty(this, Keys.PAY_PAYMENT_BENEFICIARY_ID_FKEY);

        return _payPaymentBeneficiaryIdFkey;
    }

    public PayPaymentOrderGroup payPaymentOrderGroup() {
        if (_payPaymentOrderGroup == null)
            _payPaymentOrderGroup = new PayPaymentOrderGroup(this, Keys.PAY_PAYMENT_GROUP_ID_FKEY);

        return _payPaymentOrderGroup;
    }

    public PayPaymentBatch payPaymentBatch() {
        if (_payPaymentBatch == null)
            _payPaymentBatch = new PayPaymentBatch(this, Keys.PAY_PAYMENT_BATCH_ID_FKEY);

        return _payPaymentBatch;
    }

    public PayThirdParty payPaymentIssuerIdFkey() {
        if (_payPaymentIssuerIdFkey == null)
            _payPaymentIssuerIdFkey = new PayThirdParty(this, Keys.PAY_PAYMENT_ISSUER_ID_FKEY);

        return _payPaymentIssuerIdFkey;
    }

    @Override
    public PayPayment as(String alias) {
        return new PayPayment(DSL.name(alias), this);
    }

    @Override
    public PayPayment as(Name alias) {
        return new PayPayment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PayPayment rename(String name) {
        return new PayPayment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PayPayment rename(Name name) {
        return new PayPayment(name, null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<Long, String, String, Long, Double, LocalDateTime, String, String, String, String, String, Long, Long, String, Long, Long, Long, String, LocalDateTime> fieldsRow() {
        return (Row19) super.fieldsRow();
    }
}
