/*
 * This file is generated by jOOQ.
 */
package io.surati.gap.payment.base.jooq.generated.tables;


import io.surati.gap.payment.base.jooq.generated.Keys;
import io.surati.gap.payment.base.jooq.generated.Public;
import io.surati.gap.payment.base.jooq.generated.tables.records.PayBankNoteRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PayBankNote extends TableImpl<PayBankNoteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.pay_bank_note</code>
     */
    public static final PayBankNote PAY_BANK_NOTE = new PayBankNote();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PayBankNoteRecord> getRecordType() {
        return PayBankNoteRecord.class;
    }

    /**
     * The column <code>public.pay_bank_note.id</code>.
     */
    public final TableField<PayBankNoteRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.pay_bank_note.book_id</code>.
     */
    public final TableField<PayBankNoteRecord, Long> BOOK_ID = createField(DSL.name("book_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.pay_bank_note.due_date</code>.
     */
    public final TableField<PayBankNoteRecord, LocalDate> DUE_DATE = createField(DSL.name("due_date"), SQLDataType.LOCALDATE, this, "");

    private PayBankNote(Name alias, Table<PayBankNoteRecord> aliased) {
        this(alias, aliased, null);
    }

    private PayBankNote(Name alias, Table<PayBankNoteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.pay_bank_note</code> table reference
     */
    public PayBankNote(String alias) {
        this(DSL.name(alias), PAY_BANK_NOTE);
    }

    /**
     * Create an aliased <code>public.pay_bank_note</code> table reference
     */
    public PayBankNote(Name alias) {
        this(alias, PAY_BANK_NOTE);
    }

    /**
     * Create a <code>public.pay_bank_note</code> table reference
     */
    public PayBankNote() {
        this(DSL.name("pay_bank_note"), null);
    }

    public <O extends Record> PayBankNote(Table<O> child, ForeignKey<O, PayBankNoteRecord> key) {
        super(child, key, PAY_BANK_NOTE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<PayBankNoteRecord> getPrimaryKey() {
        return Keys.PAY_BANK_NOTE_PKEY;
    }

    @Override
    public List<UniqueKey<PayBankNoteRecord>> getKeys() {
        return Arrays.<UniqueKey<PayBankNoteRecord>>asList(Keys.PAY_BANK_NOTE_PKEY);
    }

    @Override
    public List<ForeignKey<PayBankNoteRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PayBankNoteRecord, ?>>asList(Keys.PAY_BANK_NOTE_ID_FKEY, Keys.PAY_BANK_NOTE_BOOK_ID_FKEY);
    }

    private transient PayPayment _payPayment;
    private transient PayBankNoteBook _payBankNoteBook;

    public PayPayment payPayment() {
        if (_payPayment == null)
            _payPayment = new PayPayment(this, Keys.PAY_BANK_NOTE_ID_FKEY);

        return _payPayment;
    }

    public PayBankNoteBook payBankNoteBook() {
        if (_payBankNoteBook == null)
            _payBankNoteBook = new PayBankNoteBook(this, Keys.PAY_BANK_NOTE_BOOK_ID_FKEY);

        return _payBankNoteBook;
    }

    @Override
    public PayBankNote as(String alias) {
        return new PayBankNote(DSL.name(alias), this);
    }

    @Override
    public PayBankNote as(Name alias) {
        return new PayBankNote(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PayBankNote rename(String name) {
        return new PayBankNote(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PayBankNote rename(Name name) {
        return new PayBankNote(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, LocalDate> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
