/*
 * This file is generated by jOOQ.
 */
package io.surati.gap.payment.base.jooq.generated.tables;


import io.surati.gap.payment.base.jooq.generated.Keys;
import io.surati.gap.payment.base.jooq.generated.Public;
import io.surati.gap.payment.base.jooq.generated.tables.records.PayThirdPartyPaymentMeanAllowedRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PayThirdPartyPaymentMeanAllowed extends TableImpl<PayThirdPartyPaymentMeanAllowedRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.pay_third_party_payment_mean_allowed</code>
     */
    public static final PayThirdPartyPaymentMeanAllowed PAY_THIRD_PARTY_PAYMENT_MEAN_ALLOWED = new PayThirdPartyPaymentMeanAllowed();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PayThirdPartyPaymentMeanAllowedRecord> getRecordType() {
        return PayThirdPartyPaymentMeanAllowedRecord.class;
    }

    /**
     * The column <code>public.pay_third_party_payment_mean_allowed.third_party_id</code>.
     */
    public final TableField<PayThirdPartyPaymentMeanAllowedRecord, Long> THIRD_PARTY_ID = createField(DSL.name("third_party_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.pay_third_party_payment_mean_allowed.mean_type_id</code>.
     */
    public final TableField<PayThirdPartyPaymentMeanAllowedRecord, String> MEAN_TYPE_ID = createField(DSL.name("mean_type_id"), SQLDataType.VARCHAR(25).nullable(false), this, "");

    private PayThirdPartyPaymentMeanAllowed(Name alias, Table<PayThirdPartyPaymentMeanAllowedRecord> aliased) {
        this(alias, aliased, null);
    }

    private PayThirdPartyPaymentMeanAllowed(Name alias, Table<PayThirdPartyPaymentMeanAllowedRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.pay_third_party_payment_mean_allowed</code> table reference
     */
    public PayThirdPartyPaymentMeanAllowed(String alias) {
        this(DSL.name(alias), PAY_THIRD_PARTY_PAYMENT_MEAN_ALLOWED);
    }

    /**
     * Create an aliased <code>public.pay_third_party_payment_mean_allowed</code> table reference
     */
    public PayThirdPartyPaymentMeanAllowed(Name alias) {
        this(alias, PAY_THIRD_PARTY_PAYMENT_MEAN_ALLOWED);
    }

    /**
     * Create a <code>public.pay_third_party_payment_mean_allowed</code> table reference
     */
    public PayThirdPartyPaymentMeanAllowed() {
        this(DSL.name("pay_third_party_payment_mean_allowed"), null);
    }

    public <O extends Record> PayThirdPartyPaymentMeanAllowed(Table<O> child, ForeignKey<O, PayThirdPartyPaymentMeanAllowedRecord> key) {
        super(child, key, PAY_THIRD_PARTY_PAYMENT_MEAN_ALLOWED);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<PayThirdPartyPaymentMeanAllowedRecord> getPrimaryKey() {
        return Keys.PAY_THIRD_PARTY_PAYMENT_MEAN_ALLOWED_PK;
    }

    @Override
    public List<UniqueKey<PayThirdPartyPaymentMeanAllowedRecord>> getKeys() {
        return Arrays.<UniqueKey<PayThirdPartyPaymentMeanAllowedRecord>>asList(Keys.PAY_THIRD_PARTY_PAYMENT_MEAN_ALLOWED_PK);
    }

    @Override
    public List<ForeignKey<PayThirdPartyPaymentMeanAllowedRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PayThirdPartyPaymentMeanAllowedRecord, ?>>asList(Keys.PAY_THIRD_PARTY_PAYMENT_MEAN_ALLOWED_THIRD_PARTY_ID_FKEY);
    }

    private transient PayThirdParty _payThirdParty;

    public PayThirdParty payThirdParty() {
        if (_payThirdParty == null)
            _payThirdParty = new PayThirdParty(this, Keys.PAY_THIRD_PARTY_PAYMENT_MEAN_ALLOWED_THIRD_PARTY_ID_FKEY);

        return _payThirdParty;
    }

    @Override
    public PayThirdPartyPaymentMeanAllowed as(String alias) {
        return new PayThirdPartyPaymentMeanAllowed(DSL.name(alias), this);
    }

    @Override
    public PayThirdPartyPaymentMeanAllowed as(Name alias) {
        return new PayThirdPartyPaymentMeanAllowed(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PayThirdPartyPaymentMeanAllowed rename(String name) {
        return new PayThirdPartyPaymentMeanAllowed(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PayThirdPartyPaymentMeanAllowed rename(Name name) {
        return new PayThirdPartyPaymentMeanAllowed(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
