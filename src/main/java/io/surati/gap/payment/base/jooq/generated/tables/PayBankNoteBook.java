/*
 * This file is generated by jOOQ.
 */
package io.surati.gap.payment.base.jooq.generated.tables;


import io.surati.gap.payment.base.jooq.generated.Keys;
import io.surati.gap.payment.base.jooq.generated.Public;
import io.surati.gap.payment.base.jooq.generated.tables.records.PayBankNoteBookRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PayBankNoteBook extends TableImpl<PayBankNoteBookRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.pay_bank_note_book</code>
     */
    public static final PayBankNoteBook PAY_BANK_NOTE_BOOK = new PayBankNoteBook();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PayBankNoteBookRecord> getRecordType() {
        return PayBankNoteBookRecord.class;
    }

    /**
     * The column <code>public.pay_bank_note_book.id</code>.
     */
    public final TableField<PayBankNoteBookRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.pay_bank_note_book.account_id</code>.
     */
    public final TableField<PayBankNoteBookRecord, Long> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.pay_bank_note_book.status_id</code>.
     */
    public final TableField<PayBankNoteBookRecord, String> STATUS_ID = createField(DSL.name("status_id"), SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * The column <code>public.pay_bank_note_book.mean_type_id</code>.
     */
    public final TableField<PayBankNoteBookRecord, String> MEAN_TYPE_ID = createField(DSL.name("mean_type_id"), SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * The column <code>public.pay_bank_note_book.start_number</code>.
     */
    public final TableField<PayBankNoteBookRecord, String> START_NUMBER = createField(DSL.name("start_number"), SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * The column <code>public.pay_bank_note_book.end_number</code>.
     */
    public final TableField<PayBankNoteBookRecord, String> END_NUMBER = createField(DSL.name("end_number"), SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * The column <code>public.pay_bank_note_book.current_number</code>.
     */
    public final TableField<PayBankNoteBookRecord, String> CURRENT_NUMBER = createField(DSL.name("current_number"), SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * The column <code>public.pay_bank_note_book.prefix_number</code>.
     */
    public final TableField<PayBankNoteBookRecord, String> PREFIX_NUMBER = createField(DSL.name("prefix_number"), SQLDataType.VARCHAR(25).nullable(false), this, "");

    private PayBankNoteBook(Name alias, Table<PayBankNoteBookRecord> aliased) {
        this(alias, aliased, null);
    }

    private PayBankNoteBook(Name alias, Table<PayBankNoteBookRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.pay_bank_note_book</code> table reference
     */
    public PayBankNoteBook(String alias) {
        this(DSL.name(alias), PAY_BANK_NOTE_BOOK);
    }

    /**
     * Create an aliased <code>public.pay_bank_note_book</code> table reference
     */
    public PayBankNoteBook(Name alias) {
        this(alias, PAY_BANK_NOTE_BOOK);
    }

    /**
     * Create a <code>public.pay_bank_note_book</code> table reference
     */
    public PayBankNoteBook() {
        this(DSL.name("pay_bank_note_book"), null);
    }

    public <O extends Record> PayBankNoteBook(Table<O> child, ForeignKey<O, PayBankNoteBookRecord> key) {
        super(child, key, PAY_BANK_NOTE_BOOK);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<PayBankNoteBookRecord, Long> getIdentity() {
        return (Identity<PayBankNoteBookRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PayBankNoteBookRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_F8;
    }

    @Override
    public List<UniqueKey<PayBankNoteBookRecord>> getKeys() {
        return Arrays.<UniqueKey<PayBankNoteBookRecord>>asList(Keys.CONSTRAINT_F8);
    }

    @Override
    public List<ForeignKey<PayBankNoteBookRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PayBankNoteBookRecord, ?>>asList(Keys.PAY_BANK_NOTE_BOOK_ACCOUNT_ID_FKEY);
    }

    private transient PayBankAccount _payBankAccount;

    public PayBankAccount payBankAccount() {
        if (_payBankAccount == null)
            _payBankAccount = new PayBankAccount(this, Keys.PAY_BANK_NOTE_BOOK_ACCOUNT_ID_FKEY);

        return _payBankAccount;
    }

    @Override
    public PayBankNoteBook as(String alias) {
        return new PayBankNoteBook(DSL.name(alias), this);
    }

    @Override
    public PayBankNoteBook as(Name alias) {
        return new PayBankNoteBook(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PayBankNoteBook rename(String name) {
        return new PayBankNoteBook(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PayBankNoteBook rename(Name name) {
        return new PayBankNoteBook(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, String, String, String, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
