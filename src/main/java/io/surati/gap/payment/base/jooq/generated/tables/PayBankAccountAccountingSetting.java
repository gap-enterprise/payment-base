/*
 * This file is generated by jOOQ.
 */
package io.surati.gap.payment.base.jooq.generated.tables;


import io.surati.gap.payment.base.jooq.generated.Keys;
import io.surati.gap.payment.base.jooq.generated.Public;
import io.surati.gap.payment.base.jooq.generated.tables.records.PayBankAccountAccountingSettingRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PayBankAccountAccountingSetting extends TableImpl<PayBankAccountAccountingSettingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.pay_bank_account_accounting_setting</code>
     */
    public static final PayBankAccountAccountingSetting PAY_BANK_ACCOUNT_ACCOUNTING_SETTING = new PayBankAccountAccountingSetting();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PayBankAccountAccountingSettingRecord> getRecordType() {
        return PayBankAccountAccountingSettingRecord.class;
    }

    /**
     * The column <code>public.pay_bank_account_accounting_setting.account_id</code>.
     */
    public final TableField<PayBankAccountAccountingSettingRecord, Long> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.pay_bank_account_accounting_setting.mean_type_id</code>.
     */
    public final TableField<PayBankAccountAccountingSettingRecord, String> MEAN_TYPE_ID = createField(DSL.name("mean_type_id"), SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * The column <code>public.pay_bank_account_accounting_setting.journal_code</code>.
     */
    public final TableField<PayBankAccountAccountingSettingRecord, String> JOURNAL_CODE = createField(DSL.name("journal_code"), SQLDataType.VARCHAR(25), this, "");

    private PayBankAccountAccountingSetting(Name alias, Table<PayBankAccountAccountingSettingRecord> aliased) {
        this(alias, aliased, null);
    }

    private PayBankAccountAccountingSetting(Name alias, Table<PayBankAccountAccountingSettingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.pay_bank_account_accounting_setting</code> table reference
     */
    public PayBankAccountAccountingSetting(String alias) {
        this(DSL.name(alias), PAY_BANK_ACCOUNT_ACCOUNTING_SETTING);
    }

    /**
     * Create an aliased <code>public.pay_bank_account_accounting_setting</code> table reference
     */
    public PayBankAccountAccountingSetting(Name alias) {
        this(alias, PAY_BANK_ACCOUNT_ACCOUNTING_SETTING);
    }

    /**
     * Create a <code>public.pay_bank_account_accounting_setting</code> table reference
     */
    public PayBankAccountAccountingSetting() {
        this(DSL.name("pay_bank_account_accounting_setting"), null);
    }

    public <O extends Record> PayBankAccountAccountingSetting(Table<O> child, ForeignKey<O, PayBankAccountAccountingSettingRecord> key) {
        super(child, key, PAY_BANK_ACCOUNT_ACCOUNTING_SETTING);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<PayBankAccountAccountingSettingRecord> getPrimaryKey() {
        return Keys.PAY_BANK_ACCOUNT_ACCOUNTING_SETTING_PK;
    }

    @Override
    public List<UniqueKey<PayBankAccountAccountingSettingRecord>> getKeys() {
        return Arrays.<UniqueKey<PayBankAccountAccountingSettingRecord>>asList(Keys.PAY_BANK_ACCOUNT_ACCOUNTING_SETTING_PK);
    }

    @Override
    public List<ForeignKey<PayBankAccountAccountingSettingRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PayBankAccountAccountingSettingRecord, ?>>asList(Keys.PAY_BANK_ACCOUNT_ACCOUNTING_SETTING_ACCOUNT_ID_FKEY);
    }

    private transient PayBankAccount _payBankAccount;

    public PayBankAccount payBankAccount() {
        if (_payBankAccount == null)
            _payBankAccount = new PayBankAccount(this, Keys.PAY_BANK_ACCOUNT_ACCOUNTING_SETTING_ACCOUNT_ID_FKEY);

        return _payBankAccount;
    }

    @Override
    public PayBankAccountAccountingSetting as(String alias) {
        return new PayBankAccountAccountingSetting(DSL.name(alias), this);
    }

    @Override
    public PayBankAccountAccountingSetting as(Name alias) {
        return new PayBankAccountAccountingSetting(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PayBankAccountAccountingSetting rename(String name) {
        return new PayBankAccountAccountingSetting(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PayBankAccountAccountingSetting rename(Name name) {
        return new PayBankAccountAccountingSetting(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
