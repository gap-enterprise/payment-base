/*
 * This file is generated by jOOQ.
 */
package io.surati.gap.payment.base.db.jooq.generated.tables;


import io.surati.gap.payment.base.db.jooq.generated.Keys;
import io.surati.gap.payment.base.db.jooq.generated.Public;
import io.surati.gap.payment.base.db.jooq.generated.tables.records.PayPaymentMeanRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PayPaymentMean extends TableImpl<PayPaymentMeanRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.pay_payment_mean</code>
     */
    public static final PayPaymentMean PAY_PAYMENT_MEAN = new PayPaymentMean();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PayPaymentMeanRecord> getRecordType() {
        return PayPaymentMeanRecord.class;
    }

    /**
     * The column <code>public.pay_payment_mean.id</code>.
     */
    public final TableField<PayPaymentMeanRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.pay_payment_mean.type_id</code>.
     */
    public final TableField<PayPaymentMeanRecord, String> TYPE_ID = createField(DSL.name("type_id"), SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * The column <code>public.pay_payment_mean.bank_id</code>.
     */
    public final TableField<PayPaymentMeanRecord, Long> BANK_ID = createField(DSL.name("bank_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.pay_payment_mean.image_file_name</code>.
     */
    public final TableField<PayPaymentMeanRecord, String> IMAGE_FILE_NAME = createField(DSL.name("image_file_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.pay_payment_mean.width</code>.
     */
    public final TableField<PayPaymentMeanRecord, Double> WIDTH = createField(DSL.name("width"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.pay_payment_mean.height</code>.
     */
    public final TableField<PayPaymentMeanRecord, Double> HEIGHT = createField(DSL.name("height"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.pay_payment_mean.dpi</code>.
     */
    public final TableField<PayPaymentMeanRecord, Short> DPI = createField(DSL.name("dpi"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field("72", SQLDataType.SMALLINT)), this, "");

    private PayPaymentMean(Name alias, Table<PayPaymentMeanRecord> aliased) {
        this(alias, aliased, null);
    }

    private PayPaymentMean(Name alias, Table<PayPaymentMeanRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.pay_payment_mean</code> table reference
     */
    public PayPaymentMean(String alias) {
        this(DSL.name(alias), PAY_PAYMENT_MEAN);
    }

    /**
     * Create an aliased <code>public.pay_payment_mean</code> table reference
     */
    public PayPaymentMean(Name alias) {
        this(alias, PAY_PAYMENT_MEAN);
    }

    /**
     * Create a <code>public.pay_payment_mean</code> table reference
     */
    public PayPaymentMean() {
        this(DSL.name("pay_payment_mean"), null);
    }

    public <O extends Record> PayPaymentMean(Table<O> child, ForeignKey<O, PayPaymentMeanRecord> key) {
        super(child, key, PAY_PAYMENT_MEAN);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<PayPaymentMeanRecord, Long> getIdentity() {
        return (Identity<PayPaymentMeanRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PayPaymentMeanRecord> getPrimaryKey() {
        return Keys.PAY_PAYMENT_MEAN_PKEY;
    }

    @Override
    public List<UniqueKey<PayPaymentMeanRecord>> getKeys() {
        return Arrays.<UniqueKey<PayPaymentMeanRecord>>asList(Keys.PAY_PAYMENT_MEAN_PKEY);
    }

    @Override
    public List<ForeignKey<PayPaymentMeanRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PayPaymentMeanRecord, ?>>asList(Keys.PAY_PAYMENT_MEAN__PAY_PAYMENT_MEAN_BANK_ID_FKEY);
    }

    private transient PayBank _payBank;

    public PayBank payBank() {
        if (_payBank == null)
            _payBank = new PayBank(this, Keys.PAY_PAYMENT_MEAN__PAY_PAYMENT_MEAN_BANK_ID_FKEY);

        return _payBank;
    }

    @Override
    public PayPaymentMean as(String alias) {
        return new PayPaymentMean(DSL.name(alias), this);
    }

    @Override
    public PayPaymentMean as(Name alias) {
        return new PayPaymentMean(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PayPaymentMean rename(String name) {
        return new PayPaymentMean(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PayPaymentMean rename(Name name) {
        return new PayPaymentMean(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, Long, String, Double, Double, Short> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
