/*
 * This file is generated by jOOQ.
 */
package io.surati.gap.payment.base.db.jooq.generated.tables;


import io.surati.gap.payment.base.db.jooq.generated.Public;
import io.surati.gap.payment.base.db.jooq.generated.tables.records.PayReferenceDocumentAmountViewRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PayReferenceDocumentAmountView extends TableImpl<PayReferenceDocumentAmountViewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.pay_reference_document_amount_view</code>
     */
    public static final PayReferenceDocumentAmountView PAY_REFERENCE_DOCUMENT_AMOUNT_VIEW = new PayReferenceDocumentAmountView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PayReferenceDocumentAmountViewRecord> getRecordType() {
        return PayReferenceDocumentAmountViewRecord.class;
    }

    /**
     * The column <code>public.pay_reference_document_amount_view.id</code>.
     */
    public final TableField<PayReferenceDocumentAmountViewRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.pay_reference_document_amount_view.amount_paid</code>.
     */
    public final TableField<PayReferenceDocumentAmountViewRecord, Double> AMOUNT_PAID = createField(DSL.name("amount_paid"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.pay_reference_document_amount_view.amount_left</code>.
     */
    public final TableField<PayReferenceDocumentAmountViewRecord, Double> AMOUNT_LEFT = createField(DSL.name("amount_left"), SQLDataType.DOUBLE, this, "");

    private PayReferenceDocumentAmountView(Name alias, Table<PayReferenceDocumentAmountViewRecord> aliased) {
        this(alias, aliased, null);
    }

    private PayReferenceDocumentAmountView(Name alias, Table<PayReferenceDocumentAmountViewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"pay_reference_document_amount_view\" as  SELECT rd.id,\n    sum(po.amount) AS amount_paid,\n    (rd.amount - sum(po.amount)) AS amount_left\n   FROM (pay_payment_order po\n     LEFT JOIN pay_reference_document rd ON ((rd.id = po.reference_document_id)))\n  WHERE ((po.status_id)::text = 'EXECUTED'::text)\n  GROUP BY rd.id;"));
    }

    /**
     * Create an aliased <code>public.pay_reference_document_amount_view</code> table reference
     */
    public PayReferenceDocumentAmountView(String alias) {
        this(DSL.name(alias), PAY_REFERENCE_DOCUMENT_AMOUNT_VIEW);
    }

    /**
     * Create an aliased <code>public.pay_reference_document_amount_view</code> table reference
     */
    public PayReferenceDocumentAmountView(Name alias) {
        this(alias, PAY_REFERENCE_DOCUMENT_AMOUNT_VIEW);
    }

    /**
     * Create a <code>public.pay_reference_document_amount_view</code> table reference
     */
    public PayReferenceDocumentAmountView() {
        this(DSL.name("pay_reference_document_amount_view"), null);
    }

    public <O extends Record> PayReferenceDocumentAmountView(Table<O> child, ForeignKey<O, PayReferenceDocumentAmountViewRecord> key) {
        super(child, key, PAY_REFERENCE_DOCUMENT_AMOUNT_VIEW);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public PayReferenceDocumentAmountView as(String alias) {
        return new PayReferenceDocumentAmountView(DSL.name(alias), this);
    }

    @Override
    public PayReferenceDocumentAmountView as(Name alias) {
        return new PayReferenceDocumentAmountView(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PayReferenceDocumentAmountView rename(String name) {
        return new PayReferenceDocumentAmountView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PayReferenceDocumentAmountView rename(Name name) {
        return new PayReferenceDocumentAmountView(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Double, Double> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
