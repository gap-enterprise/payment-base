/*
 * This file is generated by jOOQ.
 */
package io.surati.gap.payment.base.jooq.generated.tables;


import io.surati.gap.payment.base.jooq.generated.Keys;
import io.surati.gap.payment.base.jooq.generated.Public;
import io.surati.gap.payment.base.jooq.generated.tables.records.PayThirdPartyRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PayThirdParty extends TableImpl<PayThirdPartyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.pay_third_party</code>
     */
    public static final PayThirdParty PAY_THIRD_PARTY = new PayThirdParty();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PayThirdPartyRecord> getRecordType() {
        return PayThirdPartyRecord.class;
    }

    /**
     * The column <code>public.pay_third_party.id</code>.
     */
    public final TableField<PayThirdPartyRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.pay_third_party.code</code>.
     */
    public final TableField<PayThirdPartyRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.pay_third_party.abbreviated</code>.
     */
    public final TableField<PayThirdPartyRecord, String> ABBREVIATED = createField(DSL.name("abbreviated"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.pay_third_party.family_id</code>.
     */
    public final TableField<PayThirdPartyRecord, Long> FAMILY_ID = createField(DSL.name("family_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.pay_third_party.payment_deadline</code>.
     */
    public final TableField<PayThirdPartyRecord, Short> PAYMENT_DEADLINE = createField(DSL.name("payment_deadline"), SQLDataType.SMALLINT.nullable(false), this, "");

    private PayThirdParty(Name alias, Table<PayThirdPartyRecord> aliased) {
        this(alias, aliased, null);
    }

    private PayThirdParty(Name alias, Table<PayThirdPartyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.pay_third_party</code> table reference
     */
    public PayThirdParty(String alias) {
        this(DSL.name(alias), PAY_THIRD_PARTY);
    }

    /**
     * Create an aliased <code>public.pay_third_party</code> table reference
     */
    public PayThirdParty(Name alias) {
        this(alias, PAY_THIRD_PARTY);
    }

    /**
     * Create a <code>public.pay_third_party</code> table reference
     */
    public PayThirdParty() {
        this(DSL.name("pay_third_party"), null);
    }

    public <O extends Record> PayThirdParty(Table<O> child, ForeignKey<O, PayThirdPartyRecord> key) {
        super(child, key, PAY_THIRD_PARTY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<PayThirdPartyRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_9;
    }

    @Override
    public List<UniqueKey<PayThirdPartyRecord>> getKeys() {
        return Arrays.<UniqueKey<PayThirdPartyRecord>>asList(Keys.CONSTRAINT_9);
    }

    @Override
    public List<ForeignKey<PayThirdPartyRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PayThirdPartyRecord, ?>>asList(Keys.PAY_THIRD_PARTY_FAMILY_ID_FKEY);
    }

    private transient PayThirdPartyFamily _payThirdPartyFamily;

    public PayThirdPartyFamily payThirdPartyFamily() {
        if (_payThirdPartyFamily == null)
            _payThirdPartyFamily = new PayThirdPartyFamily(this, Keys.PAY_THIRD_PARTY_FAMILY_ID_FKEY);

        return _payThirdPartyFamily;
    }

    @Override
    public PayThirdParty as(String alias) {
        return new PayThirdParty(DSL.name(alias), this);
    }

    @Override
    public PayThirdParty as(Name alias) {
        return new PayThirdParty(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PayThirdParty rename(String name) {
        return new PayThirdParty(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PayThirdParty rename(Name name) {
        return new PayThirdParty(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, String, Long, Short> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
