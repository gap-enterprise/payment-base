/*
 * This file is generated by jOOQ.
 */
package io.surati.gap.payment.base.jooq.generated.tables;


import io.surati.gap.payment.base.jooq.generated.Keys;
import io.surati.gap.payment.base.jooq.generated.Public;
import io.surati.gap.payment.base.jooq.generated.tables.records.PayPaymentExportRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PayPaymentExport extends TableImpl<PayPaymentExportRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.pay_payment_export</code>
     */
    public static final PayPaymentExport PAY_PAYMENT_EXPORT = new PayPaymentExport();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PayPaymentExportRecord> getRecordType() {
        return PayPaymentExportRecord.class;
    }

    /**
     * The column <code>public.pay_payment_export.id</code>.
     */
    public final TableField<PayPaymentExportRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.pay_payment_export.payment_id</code>.
     */
    public final TableField<PayPaymentExportRecord, Long> PAYMENT_ID = createField(DSL.name("payment_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.pay_payment_export.is_done</code>.
     */
    public final TableField<PayPaymentExportRecord, Boolean> IS_DONE = createField(DSL.name("is_done"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private PayPaymentExport(Name alias, Table<PayPaymentExportRecord> aliased) {
        this(alias, aliased, null);
    }

    private PayPaymentExport(Name alias, Table<PayPaymentExportRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.pay_payment_export</code> table reference
     */
    public PayPaymentExport(String alias) {
        this(DSL.name(alias), PAY_PAYMENT_EXPORT);
    }

    /**
     * Create an aliased <code>public.pay_payment_export</code> table reference
     */
    public PayPaymentExport(Name alias) {
        this(alias, PAY_PAYMENT_EXPORT);
    }

    /**
     * Create a <code>public.pay_payment_export</code> table reference
     */
    public PayPaymentExport() {
        this(DSL.name("pay_payment_export"), null);
    }

    public <O extends Record> PayPaymentExport(Table<O> child, ForeignKey<O, PayPaymentExportRecord> key) {
        super(child, key, PAY_PAYMENT_EXPORT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<PayPaymentExportRecord, Long> getIdentity() {
        return (Identity<PayPaymentExportRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PayPaymentExportRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_3;
    }

    @Override
    public List<UniqueKey<PayPaymentExportRecord>> getKeys() {
        return Arrays.<UniqueKey<PayPaymentExportRecord>>asList(Keys.CONSTRAINT_3);
    }

    @Override
    public List<ForeignKey<PayPaymentExportRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PayPaymentExportRecord, ?>>asList(Keys.PAY_PAYMENT_EXPORT_PAYMENT_ID_FKEY);
    }

    private transient PayPayment _payPayment;

    public PayPayment payPayment() {
        if (_payPayment == null)
            _payPayment = new PayPayment(this, Keys.PAY_PAYMENT_EXPORT_PAYMENT_ID_FKEY);

        return _payPayment;
    }

    @Override
    public PayPaymentExport as(String alias) {
        return new PayPaymentExport(DSL.name(alias), this);
    }

    @Override
    public PayPaymentExport as(Name alias) {
        return new PayPaymentExport(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PayPaymentExport rename(String name) {
        return new PayPaymentExport(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PayPaymentExport rename(Name name) {
        return new PayPaymentExport(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
